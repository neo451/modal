local Fraction
Fraction = require("modal.fraction").Fraction
return describe("Fraction", function()
  it("should new with arguments", function()
    local f = Fraction()
    assert.are.equal(f.numerator, 0)
    assert.are.equal(f.denominator, 1)
    f = Fraction(3, 4)
    assert.are.equal(f.numerator, 3)
    assert.are.equal(f.denominator, 4)
    f = Fraction(6, 8)
    assert.are.equal(f.numerator, 3)
    assert.are.equal(f.denominator, 4)
    f = Fraction(-4, 8)
    assert.are.equal(f.numerator, -1)
    assert.are.equal(f.denominator, 2)
    f = Fraction(4, -8)
    assert.are.equal(f.numerator, -1)
    assert.are.equal(f.denominator, 2)
    f = Fraction(-4, -8)
    assert.are.equal(f.numerator, 1)
    assert.are.equal(f.denominator, 2)
    f = Fraction(1.5)
    assert.are.equal(f.numerator, 3)
    assert.are.equal(f.denominator, 2)
    f = Fraction(-1.5)
    assert.are.equal(f.numerator, -3)
    assert.are.equal(f.denominator, 2)
    f = Fraction(0.777)
    assert.are.equal(f.numerator, 777)
    assert.are.equal(f.denominator, 1000)
    f = Fraction(0.0)
    assert.are.equal(f.numerator, 0)
    return assert.are.equal(f.denominator, 1)
  end)
  it("should throw on divide by zero", function()
    return assert.has_error(function()
      return Fraction(1, 0)
    end)
  end)
  it("should add", function()
    local f1 = Fraction(1, 2)
    local f2 = Fraction(1, 2)
    assert.are.equal(f1 + f2, Fraction(1))
    f1 = Fraction(1, 2)
    f2 = Fraction(1, 3)
    assert.are.equal(f1 + f2, Fraction(5, 6))
    f1 = Fraction(1, 2)
    f2 = Fraction(-1, 3)
    return assert.are.equal(f1 + f2, Fraction(1, 6))
  end)
  it("should subtract", function()
    local f1 = Fraction(1, 2)
    local f2 = Fraction(1, 2)
    assert.are.equal(f1 - f2, Fraction(0))
    f1 = Fraction(1, 2)
    f2 = Fraction(1, 3)
    assert.are.equal(f1 - f2, Fraction(1, 6))
    f1 = Fraction(1, 2)
    f2 = Fraction(-1, 3)
    return assert.are.equal(f1 - f2, Fraction(5, 6))
  end)
  it("should multiply", function()
    local f1 = Fraction(1, 2)
    local f2 = Fraction(1, 2)
    assert.are.equal(f1 * f2, Fraction(1, 4))
    f1 = Fraction(1, 2)
    f2 = Fraction(1, 3)
    assert.are.equal(f1 * f2, Fraction(1, 6))
    f1 = Fraction(1, 2)
    f2 = Fraction(-1, 3)
    return assert.are.equal(f1 * f2, Fraction(-1, 6))
  end)
  it("should divide", function()
    local f1 = Fraction(1, 2)
    local f2 = Fraction(1, 2)
    assert.are.equal(f1 / f2, Fraction(1))
    f1 = Fraction(1, 2)
    f2 = Fraction(1, 3)
    assert.are.equal(f1 / f2, Fraction(3, 2))
    f1 = Fraction(1, 2)
    f2 = Fraction(-1, 3)
    return assert.are.equal(f1 / f2, Fraction(-3, 2))
  end)
  it("should support mod", function()
    local f1 = Fraction(1, 2)
    local f2 = Fraction(2, 3)
    assert.are.equal(f1 % f2, Fraction(1, 2))
    f1 = Fraction(3, 4)
    f2 = Fraction(2, 3)
    return assert.are.equal(f1 % f2, Fraction(1, 12))
  end)
  it("should be able to be raised to a power", function()
    local f1 = Fraction(1, 4)
    local f2 = Fraction(1, 2)
    assert.are.equal(f1 ^ f2, 0.5)
    f1 = Fraction(1, 4)
    f2 = Fraction(2, 1)
    return assert.are.equal(f1 ^ f2, Fraction(1, 16))
  end)
  it("should support negative operator", function()
    local f1 = Fraction(1, 4)
    return assert.are.equal(-f1, Fraction(-1, 4))
  end)
  it("should be able to be floored", function()
    local f1 = Fraction(1, 4)
    assert.are.equal(f1:floor(), 0)
    f1 = Fraction(5, 4)
    assert.are.equal(f1:floor(), 1)
    f1 = Fraction(9, 4)
    return assert.are.equal(f1:floor(), 2)
  end)
  it("should support greater than comparison", function()
    assert.is_true(Fraction(3, 4) > Fraction(1, 3))
    assert.is_true(Fraction(5, 4) > Fraction(1, 1))
    assert.is_false(Fraction(1, 3) > Fraction(1, 2))
    return assert.is_false(Fraction(5, 4) > Fraction(7, 4))
  end)
  it("should support less than comparison", function()
    assert.is_true(Fraction(1, 4) < Fraction(1, 3))
    assert.is_true(Fraction(1, 4) < Fraction(1, 3))
    assert.is_true(Fraction(5, 4) < Fraction(7, 3))
    assert.is_false(Fraction(2, 3) < Fraction(1, 2))
    return assert.is_false(Fraction(9, 1) < Fraction(7, 4))
  end)
  it("should support greater than or equal to comparison", function()
    assert.is_true(Fraction(3, 4) >= Fraction(1, 3))
    assert.is_true(Fraction(1, 3) >= Fraction(1, 3))
    assert.is_true(Fraction(-1, 3) >= Fraction(-7, 3))
    assert.is_true(Fraction(5, 4) >= Fraction(5, 4))
    assert.is_false(Fraction(1, 3) >= Fraction(1, 2))
    return assert.is_false(Fraction(5, 4) >= Fraction(7, 4))
  end)
  it("should support less than or equal to comparison", function()
    assert.is_true(Fraction(1, 4) <= Fraction(1, 3))
    assert.is_true(Fraction(1, 4) <= Fraction(1, 4))
    assert.is_true(Fraction(5, 4) <= Fraction(7, 3))
    assert.is_true(Fraction(-5, 4) <= Fraction(7, 3))
    assert.is_false(Fraction(2, 3) <= Fraction(1, 2))
    return assert.is_false(Fraction(9, 1) <= Fraction(7, 4))
  end)
  it("should support equal to comparison", function()
    assert.is_true(Fraction(1, 4) == Fraction(1, 4))
    assert.is_true(Fraction(5, 4) == Fraction(10, 8))
    assert.is_true(Fraction(-2, 3) == Fraction(8, -12))
    assert.is_true(Fraction(-1, 3) == Fraction(-3, 9))
    return assert.is_false(Fraction(254, 255) == Fraction(255, 256))
  end)
  it("should support min", function()
    assert.are.equal(Fraction(3, 4):min(Fraction(5, 6)), Fraction(3, 4))
    assert.are.equal(Fraction(3, 4):min(Fraction(3, 6)), Fraction(3, 6))
    assert.are.equal(Fraction(3, 4):min(Fraction(-5, 6)), Fraction(-5, 6))
    return assert.are.equal(Fraction(-3, 4):min(Fraction(-5, 6)), Fraction(-5, 6))
  end)
  it("should support max", function()
    assert.are.equal(Fraction(3, 4):max(Fraction(5, 6)), Fraction(5, 6))
    assert.are.equal(Fraction(3, 4):max(Fraction(3, 6)), Fraction(3, 4))
    assert.are.equal(Fraction(3, 4):max(Fraction(-5, 6)), Fraction(3, 4))
    return assert.are.equal(Fraction(-3, 4):max(Fraction(-5, 6)), Fraction(-3, 4))
  end)
  return it("should show string representation", function()
    return assert.are.equal(Fraction(1, 2):show(), "1/2")
  end)
end)
